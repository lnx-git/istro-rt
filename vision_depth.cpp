#include "vision_depth.h"
#include "mtime.h"
#include "logger.h"

LOG_DEFINE(loggerVisionDepth, "VisionDepth");

#ifdef ISTRO_VISION_DEPTH

const int CDEPTH_COL_REF1_START = 71;

/* rovno: out_1756_test_depth2, image[1023], col[424] */
int cdepth_col_ref1[CAMERA_DEPTH_FRAME_HEIGHT] = {
    48530,48530,48530,48530,48530,48530,48530,48530,48530,48530,48530,52263,52263,52263,56619,52263,52263,52263,52263,
    52263,52263,52263,52263,52263,56619,56619,56619,56619,61766,61766,61766,61766,61766,61766,61766,61766,65535,65535,
    65535,65535,65535,65535,65535,65535,65535,61766,56619,48530,42464,37746,35759,32354,29540,29540,28309,27177,27177,
    28309,29540,30883,33971,35759,37746,39966,42464,45295,42464,42464,37746,33971,30883,27177,24265,23428,22648,21232,
    19412,18363,17421,16571,15801,15098,14155,13589,13066,12819,12582,12133,11920,11714,11324,10958,10616,10294,9992,
    9706,9436,9059,8711,8388,8186,7993,7721,7549,7306,7077,6933,6794,6661,6471,6350,6233,6121,6013,
    5857,5758,5615,5524,5435,5350,5226,5108,5033,4959,4853,4785,4718,4654,4591,4530,4441,4383,4328,
    4273,4194,4143,4068,3997,3927,3882,3817,3754,3673,3633,3576,3520,3484,3449,3414,3380,3347,3314,
    3282,3235,3190,3160,3117,3088,3047,3020,2993,2967,2954,2929,2904,2891,2867,2843,2819,2785,2751,
    2718,2696,2664,2633,2603,2574,2545,2516,2498,2471,2453,2427,2409,2392,2376,2367,2343,2327,2311,
    2288,2265,2250,2228,2206,2192,2171,2150,2137,2123,2110,2097,2084,2071,2059,2046,2034,2022,2004,
    1987,1969,1952,1941,1925,1914,1898,1887,1877,1867,1861,1846,1836,1822,1812,1797,1788,1774,1765,
    1751,1738,1729,1716,1707,1699,1690,1678,1669,1661,1653,1645,1637,1625,1622,1614,1602,1595,1587,
    1580,1569,1558,1551,1541,1534,1523,1517,1510,1503,1497,1490,1483,1474,1467,1461,1449,1439,1433,
    1424,1415,1407,1398,1389,1384,1378,1373,1367,1362,1356,1348,1343,1335,1330,1322,1319,1312,1307,
    1302,1297,1292,1284,1277,1272,1265,1261,1254,1249,1244,1242,1238,1233,1226,1220,1215,1209,1200,
    1194,1188,1184,1180,1175,1171,1167,1163,1159,1155,1152,1146,1142,1136,1132,1129,1123,1117,1116,
    1110,1105,1101,1096,1091,1085,1082,1077,1073,1068,1065,1062,1058,1055,1052,1048,1044,1040,1036,
    1031,1026,1022,1019,1014,1011,1008,1005,1002,1001,998,995,992,989,986,982,979,975,972,
    968,964,960,957,953,950,948,944,941,938,936,933,931,928,926,922,918,916,912,
    908,905,901,899,896,894,892,889,887,885,884,881,879,878,874,871,869,866,862,
    859,856,852,849,846,843,840,838,835,832,830,827,826,824,822,820,819,816,814,
    812,809,807,804,801,799,797,794,791,789,787,785,783,781,779,777,776,775,773,
    771,769,768,766,764,763,760,757,755,752,751,748,746,743,741,739,738,736,735,
    734,732,731,729,727,725,724,721,720,717,715,714,712,711,709,707,706,705,704,
    703,703,702,702,701
};

/* velky naklon dole: out_1756_test_depth2, image[3436], col[424] */
int cdepth_col_ref2[CAMERA_DEPTH_FRAME_HEIGHT] = {
    2526,2507,2507,2498,2489,2471,2462,2444,2435,2418,2401,2384,2367,2359,2335,2327,2311,2295,2280,2265,2257,
    2250,2235,2228,2213,2199,2192,2185,2171,2164,2150,2137,2123,2110,2103,2091,2078,2065,2053,2040,2022,2004,
    1987,1969,1952,1941,1930,1919,1908,1903,1898,1893,1882,1877,1867,1856,1851,1841,1826,1822,1807,1797,1788,
    1779,1769,1760,1751,1742,1733,1724,1716,1707,1703,1694,1686,1678,1669,1657,1649,1645,1637,1629,1622,1618,
    1610,1602,1599,1591,1584,1576,1565,1558,1551,1541,1534,1527,1520,1517,1510,1506,1500,1497,1497,1490,1487,
    1483,1477,1471,1461,1452,1446,1436,1430,1424,1418,1413,1407,1404,1401,1395,1389,1387,1381,1375,1370,1362,
    1356,1351,1345,1340,1335,1330,1324,1319,1317,1312,1307,1299,1294,1289,1284,1280,1275,1270,1265,1263,1261,
    1258,1256,1251,1249,1247,1242,1240,1235,1231,1226,1222,1215,1211,1207,1200,1196,1192,1186,1180,1175,1171,
    1167,1163,1159,1157,1154,1150,1148,1144,1140,1136,1132,1129,1125,1121,1117,1114,1110,1107,1105,1103,1099,
    1098,1094,1092,1089,1085,1082,1078,1075,1072,1067,1062,1058,1055,1050,1047,1044,1040,1039,1036,1033,1029,
    1026,1023,1022,1020,1017,1014,1013,1010,1008,1007,1005,1001,998,995,990,988,983,980,978,973,971,
    968,966,964,962,960,958,957,954,952,950,948,945,942,940,936,933,931,928,926,923,921,
    919,917,914,912,908,906,903,901,899,896,894,892,890,888,886,885,884,881,880,878,876,
    873,872,870,868,866,862,860,858,856,854,851,849,847,846,845,843,842,840,838,837,835,
    833,830,827,825,823,820,818,816,814,812,811,810,808,807,805,803,801,799,797,796,794,
    792,790,788,787,785,785,783,781,779,777,776,773,771,769,768,766,764,763,762,760,759,
    757,757,755,755,752,752,749,747,745,743,741,739,737,735,734,732,731,730,729,728,727,
    726,725,724,723,721,720,717,716,714,713,711,709,708,706,705,704,703,701,700,699,698,
    697,696,695,693,692,690,688,687,686,685,684,681,680,679,678,677,675,674,672,671,669,
    668,667,665,664,664,662,661,660,659,658,657,656,655,654,652,651,650,648,647,646,645,
    643,643,642,640,640,639,637,636,634,633,631,630,629,628,627,626,624,624,623,622,622,
    620,619,618,617,616,614,613,612,610,609,608,607,606,605,604,604,604,603,602,601,600,
    599,598,597,595,594,593,592,591,590,589,588,588,587,586,586,586,585,585
};

/* schody: out_1853_pri_schodoch, image[3351], col[424] */
int cdepth_col_test[CAMERA_DEPTH_FRAME_HEIGHT] = {
    52263,56619,56619,56619,61766,61766,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,52263,
    48530,42464,37746,35759,30883,28309,27177,26132,26132,26132,26132,26132,26132,26132,26132,27177,27177,27177,
    26132,26132,25164,25164,24265,23428,22648,21232,21232,20589,20589,21917,23428,24265,25164,26132,27177,28309,
    28309,28309,28309,28309,28309,29540,29540,30883,30883,30883,32354,30883,30883,30883,30883,30883,30883,29540,
    29540,29540,29540,29540,28309,28309,27177,26132,26132,24265,24265,23428,22648,22648,21917,21232,21232,21232,
    20589,20589,20589,19983,19412,18873,18873,18363,16986,15801,14155,12819,11516,10616,9847,9181,8711,8286,
    7993,7721,7549,7466,7306,7152,7004,6933,6794,6661,6596,6533,6471,6410,6350,6291,6177,6121,
    6013,5960,5857,5857,5807,5758,5662,5615,5569,5479,5435,5392,5308,5186,5108,5033,4959,4923,
    4853,4819,4751,4718,4686,4686,4654,4622,4591,4560,4530,4500,4470,4412,4355,4328,4273,4220,
    4168,4143,4118,4093,4068,4044,4020,3997,3973,3950,3927,3905,3860,3860,3817,3796,3775,3754,
    3733,3713,3713,3673,3653,3614,3576,3557,3520,3502,3466,3449,3414,3380,3363,3331,3298,3282,
    3251,3205,3175,3145,3131,3102,3074,3060,3047,3033,3020,3006,3006,3006,3006,3006,3006,3006,
    3006,2993,2993,2993,2993,2993,2980,2980,2967,2954,2941,2916,2904,2879,2855,2843,2819,2796,
    2773,2751,2718,2696,2675,2654,2623,2603,2583,2554,2535,2516,2489,2471,2444,2427,2409,2392,
    2384,2367,2359,2343,2335,2327,2311,2303,2295,2288,2272,2257,2242,2228,2213,2199,2185,2164,
    2150,2137,2123,2117,2110,2110,2103,2103,2097,2103,2103,2103,2103,2103,2103,2103,2103,2103,
    2103,2103,2103,2103,2103,2103,2103,2097,2091,2084,2071,2065,2053,2040,2028,2016,2010,1998,
    1992,1981,1975,1969,1964,1958,1941,1936,1925,1914,1908,1898,1887,1882,1882,1877,1872,1867,
    1856,1846,1841,1831,1826,1807,1797,1783,1774,1760,1742,1733,1720,1711,1699,1686,1673,1661,
    1653,1645,1637,1629,1622,1614,1610,1610,1606,1606,1599,1595,1595,1591,1587,1576,1569,1562,
    1555,1544,1537,1530,1520,1513,1506,1497,1493,1483,1477,1467,1461,1455,1446,1439,1433,1427,
    1421,1418,1413,1410,1407,1407,1404,1401,1398,1395,1395,1392,1389,1384,1381,1375,1370,1367,
    1362,1356,1351,1345,1340,1332,1332,1327,1322,1319,1314,1312,1309,1307,1302,1297,1294,1292,
    1289,1287,1282,1277,1272,1268,1263,1258,1256,1251,1249,1244,1240,1238,1233,1229,1224,1220,
    1215,1211,1205,1203,1200,1196,1194,1190,1188,1184,1180,1178,1173,1169,1165,1161,1157,1152,
    1148,1142,1136,1132,1127,1123,1119,1117,1116,1112,1110,1108,1105,1105,1103,1101,1099,1096,
    1094,1091,1089,1085,1080,1077,1075,1072,1070,1068,1067,1065
};

/* jama: out_1746_test_depth1, image[9548], col[424] */
int cdepth_col_test2[CAMERA_DEPTH_FRAME_HEIGHT] = {
    7993,7900,7900,7721,7721,7549,7466,7306,7228,7228,7306,7306,7385,7549,7721,7993,8286,8493,8600,8824,9059,
    9307,9569,9706,9569,9436,9307,9059,8824,8493,8286,7993,7900,7993,8186,8286,8388,8711,8824,9181,9307,9436,
    9569,9436,9569,9706,9992,10141,10453,10616,10616,10616,10616,10616,10453,10294,10141,10141,9992,10141,10141,10294,10294,
    10294,10294,10141,10141,9847,9706,9706,9569,9569,9706,9706,9847,9847,9992,9992,10141,10294,10294,10453,10785,10785,
    11138,11324,11516,11714,11920,11920,12133,12133,11920,11714,11516,9059,7152,0,0,4470,4194,4093,4068,4068,4068,
    4068,4044,4044,4044,4044,4044,4068,4068,4068,4093,4143,4168,4168,4194,4194,4194,4194,4194,4168,4143,4143,
    4143,4168,4168,4194,4194,4194,4220,4246,4246,4273,4273,4300,4300,4300,4300,4273,4246,4220,4168,4093,4044,
    4020,3950,3905,3882,3860,3817,3796,3775,3754,3713,3673,3633,3595,3557,3520,3466,3431,3380,3347,3314,3282,
    3266,3251,3235,3220,3220,3190,3190,3190,3175,3175,3160,3145,3131,3145,3131,3145,3131,3117,3102,3088,3074,
    3060,3033,3020,2980,2980,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,2603,2583,2564,2545,2526,2507,2489,2471,2453,2435,2435,2418,2409,2401,2401,2392,2392,2384,2376,2367,
    2359,2351,2351,2343,2335,2319,2311,2295,2280,2272,2265,2250,2235,2220,2213,2206,2199,2192,2185,2178,2171,
    2157,2143,2130,2117,2103,2084,2071,2053,2034,2022,2004,1992,1975,1958,1947,1936,1925,1914,1914,1908,1903,
    1903,1903,1898,1893,1887,1887,1882,1872,1861,1856,1851,1841,1831,1822,1812,1802,1793,1783,1769,1760,1756,
    1751,1747,1742,1738,1733,1729,1720,1716,1711,1703,1699,1690,1678,1641,1591,1541,1497,1452,1413,1373,1340,
    1324,1319,1317,1312,1307,1304,1299,1297,1294,1292,1287,1282,1277,1270,1265,1258,1251,1247,1242,1238,1233,
    1229,1224,1222,1218,1213,1209,1203,1198,1192,1188,1184,1182,1178,1175,1169,1167,1163,1159,1155,1152,1150,
    1146,1142,1138,1136,1132,1129,1125,1121,1117,1116,1114,1112,1110,1107,1103,1099,1098,1094,1089,1084,1080,
    1077,1073,1070,1067,1063,1060,1057,1055,1052,1048,1045,1042,1039,1034,1031,1028,1025,1022,1017,1016,1013,
    1011,1010,1007,1005,1004,1001,998,996,993,990,989,985,983,980,978,975,973,971,966,964,961,
    958,956,953,952,949,946,944,942,940,936,933,929,926,923,921,918,916,914,912,910,908,
    906,905,902,900,896,894,892,889,888,886,884,881,880,878,876,873,871,869,867,864,863,
    861,859,857,856,854,852,850,849,847,846,844,841,840,838,837,836,834,833
};

/* flak na ceste: out_1805_wrongway_pri_strome_a_baterka_vybita_1100m, image[25702], col[424] */
int cdepth_col_test3[CAMERA_DEPTH_FRAME_HEIGHT] = {
    0,0,32354,0,0,0,33971,35759,35759,37746,39966,42464,45295,45295,45295,42464,42464,42464,39966,
    39966,37746,37746,39966,39966,42464,42464,45295,45295,45295,48530,45295,45295,45295,45295,42464,39966,37746,39966,
    39966,42464,42464,45295,48530,52263,52263,56619,56619,56619,56619,56619,56619,52263,48530,48530,45295,42464,39966,
    39966,37746,37746,37746,35759,35759,35759,37746,37746,39966,39966,42464,42464,42464,45295,45295,45295,45295,45295,
    45295,45295,45295,48530,48530,48530,48530,48530,48530,48530,48530,48530,48530,45295,45295,48530,48530,48530,45295,
    45295,45295,42464,42464,42464,42464,42464,42464,45295,45295,45295,45295,45295,45295,45295,45295,45295,45295,45295,
    45295,45295,45295,42464,39966,37746,33971,32354,29540,28309,26132,24265,22648,21232,19412,17880,16571,15801,14770,
    13866,13322,12582,12133,11714,11324,10958,10616,10141,9847,9436,9059,8711,8493,8088,7809,7466,7306,7077,
    6863,6661,6471,6291,6177,6066,5960,5857,5758,5662,5569,5479,5350,5267,5186,5108,5033,4959,4888,
    4751,4686,4560,4470,4355,4300,4220,4143,4068,4020,3973,3927,3882,3817,3754,3693,3653,3595,3557,
    3520,3466,3414,3397,3363,3347,3314,3282,3251,3220,3190,3145,3117,3088,3047,3006,2980,2941,2916,
    2879,2855,2808,2785,2740,2707,2675,2644,2613,2583,2545,2526,2498,2480,2453,2435,2409,2392,2376,
    2359,2343,2335,2327,2311,2295,2280,2265,2257,2242,2228,2213,2199,2185,2171,2150,2130,2110,2091,
    2071,2053,2034,2016,1998,1987,1969,1958,1941,1930,1919,1903,1887,1872,1861,1846,1836,1822,1812,
    1802,1793,1783,1774,1765,1756,1747,1738,1724,1716,1703,1694,1682,1669,1661,1653,1641,1633,1625,
    1618,1606,1599,1591,1580,1573,1565,1558,1548,1537,1527,1517,1506,1497,1487,1477,1471,1461,1452,
    1443,1436,1427,1421,1413,1407,1401,1392,1389,1384,1378,1373,1367,1359,1351,1345,1340,1332,1327,
    1322,1317,1309,1304,1299,1292,1287,1282,1275,1268,1263,1258,1254,1249,1244,1240,1235,1233,1229,
    1224,1220,1213,1209,1205,1198,1192,1186,1180,1173,1167,1163,1155,1150,1146,1140,1134,1130,1125,
    1121,1117,1114,1110,1107,1101,1098,1092,1087,1082,1077,1072,1067,1063,1060,1057,1053,1048,1047,
    1044,1039,1036,1031,1026,1023,1019,1016,1011,1007,1004,1001,998,995,992,990,988,985,980,
    976,972,969,965,961,958,954,952,949,945,941,938,936,932,928,926,923,921,918,
    916,913,911,908,905,901,898,894,890,887,884,881,878,876,873,871,869,867,864,
    862,859,856,852,850,847,844,842,839,837,835,832,829,827,824,822,820,819,817,
    815,813,812,810,808,807,805,802,800,797,795,792,788,785,782,779,776,775,773,
    772,771,770,769,769
};

/* 22.11.2020 nevysiel do kopca: out_1417_nacuval_do_murika, image[102916], col[424] */
int cdepth_col_test4[CAMERA_DEPTH_FRAME_HEIGHT] = {
    0,65535,61766,56619,0,52263,48530,48530,45295,42464,39966,39966,39966,30883,0,0,0,15801,14456,
    14456,14456,14456,14456,14770,15098,15441,16177,0,0,0,24265,29540,30883,32354,33971,35759,37746,37746,
    39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,39966,37746,37746,
    37746,37746,39966,39966,42464,42464,42464,42464,42464,42464,42464,39966,37746,37746,35759,35759,33971,
    33971,33971,33971,33971,33971,33971,33971,33971,33971,33971,32354,32354,32354,32354,30883,29540,27177,
    27177,26132,25164,24265,24265,23428,24265,24265,24265,24265,24265,24265,23428,23428,23428,22648,23428,
    24265,26132,28309,30883,33971,37746,42464,45295,45295,45295,45295,42464,39966,37746,37746,35759,35759,
    35759,35759,35759,35759,35759,35759,33971,35759,35759,35759,35759,35759,37746,37746,39966,39966,39966,
    39966,42464,45295,48530,52263,56619,61766,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,
    65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,
    65535,65535,65535,65535,65535,65535,65535,65535,65535,65535,56619,52263,48530,48530,45295,45295,45295,
    45295,45295,45295,45295,45295,45295,45295,42464,42464,42464,45295,45295,42464,24265,16986,13322,0,
    9181,7993,7306,6727,6533,6350,6177,5908,5662,5435,5147,4923,4686,4500,4273,4118,3973,3860,3754,3653,
    3557,3484,3431,3380,3314,3266,3205,3145,3074,3020,2954,2891,2831,2773,2718,2664,2613,2574,2526,2489,
    2444,2418,2384,2351,2319,2295,2265,2235,2213,2185,2164,2137,2110,2091,2065,2046,2028,2010,1992,1969,
    1958,1941,1919,1903,1887,1872,1856,1846,1826,1812,1797,1783,1774,1765,1756,1742,1733,1724,1716,1703,
    1694,1682,1673,1665,1653,1641,1633,1625,1614,1606,1599,1587,1576,1565,1558,1548,1537,1530,1520,1513,
    1503,1497,1490,1480,1474,1467,1461,1455,1446,1436,1430,1424,1415,1410,1401,1395,1384,1378,1370,1362,
    1356,1348,1340,1332,1327,1322,1319,1314,1309,1302,1297,1289,1284,1275,1268,1263,1256,1249,1244,1240,
    1235,1231,1226,1222,1218,1213,1209,1200,1194,1190,1184,1178,1171,1165,1161,1155,1152,1148,1142,1138,
    1132,1129,1125,1119,1116,1110,1107,1101,1098,1092,1087,1082,1077,1073,1070,1067,1063,1060,1057,1053,
    1048,1045,1040,1037,1033,1029,1025,1020,1017,1013,1010,1007,1002,999,996,993,990,988,983,980,976,973,
    971,966,962,958,954,950,946,944,940,936,932,931,928,926,923,921,919,917,914,911,908,905,900,896,893,
    889,886,882,880,878,876,874,872,871,869,867,863,860,857,855,851,848,845,842,840,837,835,832,830,827,
    825,823,820,819,817,814,812,810,807,804,801,798,796,794,791,789,789,787,786,785
};


const ushort DRLIMIT_DIST_NONE = 100;        // minimalna vzdialenost, s ktorou dokaze senzor pracovat (treba ignorovat 0)

const float DRLIMIT_DIST_MIN_PP  = 0.80;

const float DRLIMIT_DELTA2_DIST  = 1500.0;   // vo vzdialenosti 1500 mm
const float DRLIMIT_DELTA2_DELTA =   60.0;   // je 8 pixelovy rozdiel 60 mm (pomer 60/1500 = 0,04)

const float DRLIMIT_DELTA2_MIN_PP  = 0.300;   // MIN vypocitame ako 30% referencnej hodnoty
//const float DRLIMIT_DELTA2_RMIN  = 0.012;   // ak pomer klesne pod 0,015, tak uz nevyhodnocujeme (uvazujeme 0?)
const float DRLIMIT_DELTA2_MAX_PP  = 0.750;   // MAX vypocitame ako referencna hodnota * 1.7 (PP2) + 75% (PP) referencnej hodnoty pri vzdialenosti 1500mm (teda 0,03)
const float DRLIMIT_DELTA2_MAX_PP2 = 1.700;   // pozn: nez PP2 nastavit 1.000
const float DRLIMIT_DELTA2_DMIN    =   8.0;   // ak 30% delta klesne pod 8mm, tak uz nevyhodnocujeme min (uvazujeme 0)
const float DRLIMIT_DELTA2_DMAX    =  30.0;   // ak delta klesne pod 30mm, tak uz nevyhodnocujeme max 

void VisionDepth::drlimit_init(void)
{
    for (int i = 0; i < CAMERA_DEPTH_FRAME_HEIGHT; i++) {
        // 0 -> 71;  479 -> 479
        float f = (479 - CDEPTH_COL_REF1_START) * i / 479.0 + CDEPTH_COL_REF1_START;

        int j1 = (int)f;
        int j2 = j1 + 1;

        int v1 = cdepth_col_ref1[j1];
        int v2 = v1;
        if (j2 < CAMERA_DEPTH_FRAME_HEIGHT) {
            v2 = cdepth_col_ref1[j2];
        }

        drl_dist_ref[i] = round((j2 - f) * v1 + (f - j1) * v2);
        drl_dist_min[i] = round(cdepth_col_ref2[i] * DRLIMIT_DIST_MIN_PP);

        //cout << "dist_ref[" << i << "]: " << drl_dist_ref[i] << endl;
        //cout << "dist_min[" << i << "]: " << drl_dist_min[i] << endl;
    }

    /* vo vzdialenosti DRLIMIT_DELTA2_DIST je referencny pomer dd */
    float dd = DRLIMIT_DELTA2_DELTA / DRLIMIT_DELTA2_DIST;  /* 60.0 / 1500.0 = 0.04 */

    for (int i = 0; i < DRLIMIT_DELTA_MIN_LIMIT; i++) {
        /* f = referencna hodnota: linearna zavislost medzi vzdialenostou a pomerom delta/vzdialenost */
        float f = i * dd / DRLIMIT_DELTA2_DIST;    

        float f2 = f * DRLIMIT_DELTA2_MIN_PP;

        drl_delta2_min[i] = round(f2 * i);
        if (drl_delta2_min[i] < DRLIMIT_DELTA2_DMIN) drl_delta2_min[i] = 0;

        //cout << "drl_delta2_min[" << i << "]: " << drl_delta2_min[i] << endl;
    }

    float f0 = DRLIMIT_DELTA2_MAX_PP * DRLIMIT_DELTA2_DELTA / DRLIMIT_DELTA2_DIST;  /* 0.750 * 60.0 / 1500.0 = 0.03 */

    for (int i = 0; i < DRLIMIT_DELTA_MAX_LIMIT; i++) {
        float f = i * dd / DRLIMIT_DELTA2_DIST;

        float f2 = f * DRLIMIT_DELTA2_MAX_PP2 + f0;

        drl_delta2_max[i] = round(f2 * i);
        if (drl_delta2_max[i] < DRLIMIT_DELTA2_DMAX) drl_delta2_max[i] = DRLIMIT_DELTA2_DMAX;

        //cout << "drl_delta2_max[" << i << "]: " << drl_delta2_max[i] << endl;
    }
}

int VisionDepth::init(void)
{
    LOGM_INFO(loggerVisionDepth, "init", "msg=\"init...\"");

    drlimit_init();

    return 0;
}

void VisionDepth::close(void)
{
    LOGM_INFO(loggerVisionDepth, "close", "msg=\"close...\"");
}

/* aky vyrez zo stereo obrazu vidi kamera v RGB rezime - urcene pokusne podla poloh rohov RGB obrazu (image_rgb_stereo.xlsx) */
const int CAMERA_DEPTH_WIN_WIDTH  = 597;   /* sirka a vyska */
const int CAMERA_DEPTH_WIN_HEIGHT = 338;
const int CAMERA_DEPTH_WIN_X      = 120;   /* lavy horny roh */
const int CAMERA_DEPTH_WIN_Y      =  73;

void VisionDepth::process(const Mat &depth, Mat &depth_pred0, Mat &depth_pred)
{
    if (depth.empty()) {
        LOGM_ERROR(loggerVisionDepth, "process", "msg=\"no depth data!\"");
        depth_pred.release();
        return;
    }

    LOGM_INFO(loggerVisionDepth, "process", "msg=\"process...\"");

    double t = timeBegin();

    /* depth_pred0 - predikcie v povodnom rozliseni 848x480 */
    depth_pred0.create(CAMERA_DEPTH_FRAME_HEIGHT, CAMERA_DEPTH_FRAME_WIDTH, CV_8UC3);

    for (int y = 0; y < depth.rows - 8; y++) {
        const ushort *p1 = depth.ptr<ushort>(y);
        const ushort *p2 = depth.ptr<ushort>(y + 8);
        Vec3b  *p3 = depth_pred0.ptr<Vec3b>(y);
        ushort dist_min = drl_dist_min[y];
        for (int x = 0; x < depth.cols; x++) {
            ushort dist = *(p1++);
            int delta = dist - *(p2++);

            if ((dist > DRLIMIT_DIST_NONE) && 
                ((dist < dist_min) || 
                 ((dist < DRLIMIT_DELTA_MIN_LIMIT) && (delta < drl_delta2_min[dist])) || 
                 ((dist < DRLIMIT_DELTA_MAX_LIMIT) && (delta > drl_delta2_max[dist])))) {
                // obstacle
                *(p3++) = Vec3b(0, 0, 0);    
//if ((x == 0) && (dist < dist_min))  cout << "img[" << y << "]: 0a" << ", dist:" << dist << ", dist_min:" << dist_min << endl;
//if ((x == 0) && (dist < DRLIMIT_DELTA_MIN_LIMIT) && (delta < drl_delta2_min[dist])) cout << "img[" << y << "]: 0b" << ", delta:" << delta << ", delta_min:" << drl_delta2_min[dist] << endl;
//if ((x == 0) && (dist < DRLIMIT_DELTA_MAX_LIMIT) && (delta > drl_delta2_max[dist])) cout << "img[" << y << "]: 0c" << ", delta:" << delta << ", delta_max:" << drl_delta2_max[dist] << endl;
            } else {
                *(p3++) = Vec3b(255, 255, 255);
//if (x == 0) cout << "img[" << y << "]: 1" << ", dist:" << dist << ", delta:" << delta << endl;
            }
        }
    }

    // poslednych 8 riadkov skopirujeme
    int y0 = depth.rows - 8 - 1;
    for (int y = depth.rows - 8; y < depth.rows; y++) {
        depth_pred0.row(y0).copyTo(depth_pred0.row(y));
    }

    // resize vybraneho okna zodpovedajuceho RGB pixlom zo 848x480 na 640x480
    depth_pred.create(480, 640, CV_8UC3);

    int xidx[640];
    for (int x = 0; x < depth_pred.cols; x++) {
         xidx[x] = round(x * CAMERA_DEPTH_WIN_WIDTH / 640.0) + CAMERA_DEPTH_WIN_X;
         //cout << "VisionDepth::process.resize: x=" << x << ", x0=" << xidx[x] << endl;
    }

    for (int y = 0; y < depth_pred.rows; y++) {
        int y0 = round(y * CAMERA_DEPTH_WIN_HEIGHT / 480.0) + CAMERA_DEPTH_WIN_Y;
        //cout << "VisionDepth::process.resize: y=" << y << ", y0=" << y0 << endl;

        Vec3b *p  = depth_pred.ptr<Vec3b>(y);
        const Vec3b *p0 = depth_pred0.ptr<Vec3b>(y0);

        for (int x = 0; x < depth_pred.cols; x++) {
            *(p++) = p0[xidx[x]];
        }
    }

    timeEnd("VisionDepth::process", t);
}

void VisionDepth::drawOutput(const Mat &image, const Mat &depth_pred, Mat &out)
{
    LOGM_INFO(loggerVisionDepth, "drawOutput", "msg=\"drawOutput...\"");
      //  << ", depth_pred.cols=" << depth_pred.cols << ", image.cols=" << image.cols
      //  << ", depth_pred.rows=" << depth_pred.rows << ", image.rows" << image.rows);

    double t = timeBegin();

    Mat imageGray;
    cvtColor(image, imageGray, COLOR_BGR2GRAY);
    cvtColor(imageGray, imageGray, COLOR_GRAY2BGR);

    Mat imageMark;
    imageMark.create(imageGray.size(), CV_8UC3);

    float dx = depth_pred.cols / image.cols;
    float dy = depth_pred.rows / image.rows;

    for(int y = 0; y < imageGray.rows; y++) {
        int y2 = round(y * dy);
        Vec3b *p = imageMark.ptr<Vec3b>(y);
        for(int x = 0; x < imageGray.cols; x++) {
            int x2 = round(x * dx);

            Vec3b v = depth_pred.at<Vec3b>(y2, x2);

            if (v.val[0] != 0) {
                *(p++) = Vec3b(0, 0, 0);    // imageMark.at<Vec3b>(y, x) = 
            } else {
                *(p++) = Vec3b(0, 255, 0);  // green  // imageMark.at<Vec3b>(y, x) =
            }
        }
    }  

    out = imageGray*0.5 + imageMark*0.5;

    timeEnd("VisionDepth::drawOutput", t);
}

void VisionDepth::getTestData(Mat &depth)
{
    depth.create(CAMERA_DEPTH_FRAME_HEIGHT, CAMERA_DEPTH_FRAME_WIDTH, CV_16UC1);

    for (int y = 0; y < depth.rows; y++) {
        //ushort vv = cdepth_col_test[y];    // schody
        //ushort vv = cdepth_col_test2[y];   // jama
        //ushort vv = cdepth_col_test3[y];   // flak na ceste
        ushort vv = cdepth_col_test4[y];     // nevysiel do sikminy
        //ushort vv = cdepth_col_ref1[y];    // rovno
        //ushort vv = cdepth_col_ref2[y];    // velky naklon dole

        // schod 
        //if ((y >= 200) && (y <= 315)) {  // 300
        //    vv = drl_dist_ref[315];
        //}
        for (int x = 0; x < depth.cols; x++) {
            depth.at<ushort>(y, x) = vv;
        }
        // cout << "depth: " << (int) depth.at<ushort>(y, 0) << endl;
    }
}

void VisionDepth::test(void)
{
    LOGM_INFO(loggerVisionDepth, "test", "msg=\"test...\"");

    Mat dm;
    VisionDepth::getTestData(dm);

    Mat dpm;
    Mat dp0m;
    LOGM_INFO(loggerVisionDepth, "test", "msg=\"process()\"");
    process(dm, dp0m, dpm);

    Mat image;

    LOGM_INFO(loggerVisionDepth, "test", "msg=\"dm.convertTo()\"");
    dm.convertTo(image, CV_8U, 1 / 256.0);
    equalizeHist(image, image);
    applyColorMap(image, image, COLORMAP_RAINBOW);  //COLORMAP_JET);

    LOGM_INFO(loggerVisionDepth, "test", "msg=\"imshow(dm)\"");
    imshow("dm", image);
    
    dpm.copyTo(image);
    imshow("dpm", image);

    drawOutput(image, dpm, image);

    imshow("out", image);

    //dpm.copyTo(image);
    //equalizeHist(image, image);
    //applyColorMap(image, image, COLORMAP_RAINBOW);  //COLORMAP_JET);

    //imshow("dpm", image);

    LOGM_INFO(loggerVisionDepth, "test", "msg=\"waitKey(0)\"");
    waitKey(0);
    
    destroyWindow("out");
    destroyWindow("dpm");
    destroyWindow("dm");
}

#endif
